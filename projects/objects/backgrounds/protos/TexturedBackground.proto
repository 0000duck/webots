#VRML_SIM R2020a utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# Background textured with a skybox.
#
# Supported values for the `texture` field:
#
# - dawn_cloudy_empty
# - empty_office (HDR)
# - entrance_hall (HDR)
# - factory (HDR)
# - morning_cloudy_empty
# - noon_building_overcast (HDR)
# - noon_cloudy_countryside (HDR)
# - noon_cloudy_empty
# - noon_cloudy_mountains
# - noon_park_empty (HDR)
# - noon_stormy_empty
# - noon_sunny_empty
# - noon_sunny_garden
# - twilight_cloudy_empty
# - mountains (HDR)

PROTO TexturedBackground [
  field  SFString{"dawn_cloudy_empty", "empty_office", "entrance_hall", "factory", "morning_cloudy_empty", "noon_building_overcast", "noon_cloudy_countryside", "noon_cloudy_empty", "noon_cloudy_mountains", "noon_park_empty", "noon_stormy_empty", "noon_sunny_empty", "noon_sunny_garden", "twilight_cloudy_empty", "mountains"}
                  texture "mountains"  # Defines the texture of the background.
  field  SFFloat  luminosity  1        # Is `Background.luminosity`.
]
{
  %{
    local texture = fields.texture.value
    local isHDR =
      texture == "empty_office" or
      texture == "entrance_hall" or
      texture == "factory" or
      texture == "noon_building_overcast" or
      texture == "noon_cloudy_countryside" or
      texture == "noon_park_empty" or
      texture == "mountains"
    local extension = isHDR and "hdr" or "jpg"
    local path = "textures/cubic"
  }%
  Background {
    skyColor 0.33 0.66 1
    backUrl [
      %{= "\"" .. path .. "/" .. texture .. "_back." .. extension .. "\"" }%
    ]
    bottomUrl [
      %{= "\"" .. path .. "/" .. texture .. "_bottom." .. extension .. "\"" }%
    ]
    frontUrl [
      %{= "\"" .. path .. "/" .. texture .. "_front." .. extension .. "\"" }%
    ]
    leftUrl [
      %{= "\"" .. path .. "/" .. texture .. "_left." .. extension .. "\"" }%
    ]
    rightUrl [
      %{= "\"" .. path .. "/" .. texture .. "_right." .. extension .. "\"" }%
    ]
    topUrl [
      %{= "\"" .. path .. "/" .. texture .. "_top." .. extension .. "\"" }%
    ]
    %{ if isHDR then }%
      backDiffuseIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_back.dm." .. extension .. "\"" }%
      ]
      bottomDiffuseIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_bottom.dm." .. extension .. "\"" }%
      ]
      frontDiffuseIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_front.dm." .. extension .. "\"" }%
      ]
      leftDiffuseIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_left.dm." .. extension .. "\"" }%
      ]
      rightDiffuseIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_right.dm." .. extension .. "\"" }%
      ]
      topDiffuseIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_top.dm." .. extension .. "\"" }%
      ]

      backSpecularIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_back.sm." .. extension .. "\"" }%
      ]
      bottomSpecularIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_bottom.sm." .. extension .. "\"" }%
      ]
      frontSpecularIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_front.sm." .. extension .. "\"" }%
      ]
      leftSpecularIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_left.sm." .. extension .. "\"" }%
      ]
      rightSpecularIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_right.sm." .. extension .. "\"" }%
      ]
      topSpecularIrradianceUrl [
        %{= "\"" .. path .. "/" .. texture .. "_top.sm." .. extension .. "\"" }%
      ]
    %{ end }%
    luminosity IS luminosity
  }
}
