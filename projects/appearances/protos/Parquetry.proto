#VRML_SIM R2020a utf8
# license: Apache License 2.0
# license url: http://www.apache.org/licenses/LICENSE-2.0
# A parquetry material. The type can be choose between "chequered", "dark_strip", "light_strip" and "mosaic". The color can be overridden using the `colorOverride` field.

PROTO Parquetry [
  field SFString{"chequered", "dark strip", "light strip", "mosaic"} type             "mosaic"  # Defines the parquetry type.
  field SFColor                                                      colorOverride    1 1 1     # Defines the default color multiplied with the texture color.
  field SFNode                                                       textureTransform NULL      # Defines an optional 2d texture transform.
  field SFFloat                                                      IBLStrength      1         # Defines the strength of ambient lighting from the Background node.
]
{
%{
  local textureName = fields.type.value:gsub("%s+", "_")
  local extension = "jpg\""
  if fields.type.value == "light_strip" then
    extension = "png\""
  end
}%
  PBRAppearance {
    baseColor IS colorOverride
    baseColorMap ImageTexture {
      url [
        %{= "\"textures/parquetry/" .. textureName .. "_parquetry_base_color." .. extension }%
      ]
      filtering 5
    }
    roughness 1
    %{ if fields.type.value ~= "dark_strip" then }%
    roughnessMap ImageTexture {
      url [
        %{= "\"textures/parquetry/" .. textureName .. "_parquetry_roughness." .. extension }%
      ]
      filtering 5
    }
    %{ end }%
    metalness 0
    normalMap ImageTexture {
      url [
        %{= "\"textures/parquetry/" .. textureName .. "_parquetry_normal." .. extension }%
      ]
      filtering 5
    }
    normalMapFactor 1
    IBLStrength IS IBLStrength
    %{ if fields.type.value ~= "light_strip" then }%
    occlusionMap ImageTexture {
      url [
        %{= "\"textures/parquetry/" .. textureName .. "_parquetry_occlusion." .. extension }%
      ]
      filtering 5
    }
    %{ end }%
    occlusionMapStrength 1
    textureTransform IS textureTransform
  }
}
